<div id="roadmap" class="container is-fluid has-background-primary-light">
  <p class="has-text-white-ter">transition</p>
  <br><br><br><br>
</div>
<div class="container">
  <div class="container has-text-centered">
    <h2 class="is-size-3 has-text-centered has-text-weight-semibold has-text-black">Feuille de route</h2>
    <hr>
    <i class="fas fa-map-marker-alt fa-2x icon-margin"></i>
    <span class="is-size-5 has-text-black-bis has-text-weight-semibold"><%= trip.places.length%> étape(s)</span>
  </div>

  <div class="columns">
    <div class="column">
      <p class="is-size-6 has-text-centered has-text-black-bis">Type d'itinéraire : <span class= "is-size-6 has-text-centered has-text-black-bis has-text-weight-semibold"><%= trip.category.name %></span> </p>
    </div>

      <div class="column">
        <% if trip.tag_list.any? %>
          <p class="is-size-6 has-text-centered has-text-black-bis"> Tags : <%= trip.tag_list %> </p>
        <% end %>
      </div>
  </div>

  <div class="columns is-mobile is-centered">
    <div class="column is-full-mobile is-three-fifths-tablet is-one-quarter-desktop is-one-quarter-widescreen is-one-quarter-fullhd">
        <% trip.trip_waypoints.order(rank: :asc).each do |waypoint| %>

          <div class="columns is-mobile">
            <div class="column is-narrow">
              <div class="numberCircleSmall"><%= waypoint.rank %></div>
            </div>
            <div class="column">
              <p class="is-size-6 has-text-weight-semibold"><%= link_to "#{waypoint.place.name}", place_path(waypoint.place[:id]), class:"has-text-black"%></p>
            </div>
            <div class="column is-narrow">
              <% if waypoint.place.place_picture.attached? %>
                <%= link_to image_tag(waypoint.place.place_picture, class: "image is-64x64"), place_path(waypoint.place.id) %>
              <% else %>
                <img class='is-rounded' src = "https://images.unsplash.com/photo-1589596619062-068730a17443?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1300&q=80">
              <% end %>
            </div>
          </div>

        <% end %>
    </div>
  </div>
</div>

<div id="carto" class="container is-fluid has-background-primary-light">
  <p class="has-text-white-ter">transition</p>
  <br><br><br><br>
</div>


<div class="columns is-mobile is-centered">
  <div class="column is-three-quarters">
    <div class="container">
      <div id="profileChoice">
        <div class="tabs is-toggle">
          <ul>
            <li>
              <a id="drivingProfile">Voiture</a>
            </li>
            <li>
              <a id="walkingProfile">À pied</a>
            </li>
            <li>
              <a id="cyclingProfile">À vélo</a>
            </li>
          </ul>
        </div>
      </div>
      <div id="tripMap"></div>
      <div id="datas" class="is-hidden-mobile"></div>
    </div>

  </div>
</div>

<div id="guide" class="container is-fluid has-background-primary-light">
  <p class="has-text-white-ter">transition</p>
  <br><br><br><br>
</div>

<section class="section">
  <h2 class="is-size-3 has-text-centered has-text-weight-semibold has-text-black">Guide</h2>
  <hr>
  <% trip.trip_waypoints.order(rank: :asc).each do |waypoint| %>
    <div class="columns is-mobile is-centered">
      <div class="column is-full-mobile is-three-quarters-tablet is-three-quarters-desktop is-three-fifths-widescreen is-three-fifths-fullhd">

        <div class="columns is-multiline is-variable is-2">
          <div class="column is-one-quarter">
            <figure class="image is-5by3">
              <% if waypoint.place.place_picture.attached? %>
                <%= link_to image_tag(waypoint.place.place_picture, class: "is-rounded"), place_path(waypoint.place.id) %>
              <% else %>
                <img class='is-rounded' src = "https://images.unsplash.com/photo-1589596619062-068730a17443?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1300&q=80">
              <% end %>
            </figure>
          </div>
          <div class="column is-three-quarters">
            <div class="columns is-mobile">
              <div class="column is-narrow">
                <div class="numberCircle">
                  <%= waypoint.rank %>
                </div>
              </div>
              <div class="column">
                <h3 class="is-size-5 has-text-weight-semibold"><%= link_to "#{waypoint.place.name}", place_path(waypoint.place[:id]), class:"has-text-black"%></h3>
              </div>
            </div>
            <p class="subtitle has-text-black is-size-6"><%= waypoint.place.subtitle %></p>
          </div>
          <div class="column">
            <p class="is-size-6 has-text-black-bis"><%= sanitize waypoint.place.description %></p>
          </div>
        </div>
        <div class="columns is-centered">
          <div class="column is-half">
            <hr>
          </div>
        </div>

      </div>
    </div>
  <% end %>
</section>

<script>

  // RAJOUTER LA CLÉ EN DESSOUS
  var accessToken =  '<%= ENV['MAPBOX_KEY']%>';
  mapboxgl.accessToken = accessToken;


  var waypoints = {
    type: 'FeatureCollection',
    features : []
  };
  gon.trip_waypoints.forEach(function(place) {
    let new_feature = {
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: [place.longitude, place.latitude]
      },
      properties: {
        name: place.name,
        description: place.description,
        subtitle: place.subtitle,
        price: place.price,
        price2: place.price_2,
        website: place.website,
        phone: place.phone,
        address: place.address,
      }
    };
    waypoints.features.push(new_feature)
  });

  var coords = []
  gon.trip_waypoints.forEach(function(place) {
    var new_array = [place.longitude, place.latitude];
    coords.push(new_array)
  });

  var listCoords = coords.join(";");

  console.log(coords);

  //on initialise notre map sur le div #tripMap
  var map = new mapboxgl.Map({
    container: 'tripMap',
    style: 'mapbox://styles/mapbox/streets-v10',
    center: [<%= trip.places.first.longitude%>, <%= trip.places.first.latitude%>], //un centre initial [longitude, latitude] qui est le point de départ de l'itinéraire
    zoom: 11 //un zoom initial (facultatif)
  });

  var language = new MapboxLanguage();
  map.addControl(language);

  let routingProfilesFr = gon.routingProfiles;
  let routingProfile = "<%= trip.category.name %>";
  if (routingProfile === "Roadtrip") {
    routingProfile = "driving";
  } else if (routingProfile === "À pied") {
    routingProfile = "walking";
  } else if (routingProfile === "À vélo") {
    routingProfile = "cycling";
  } else {

  };

  let drivingProfile = document.getElementById('drivingProfile');
  let walkingProfile = document.getElementById('walkingProfile');
  let cyclingProfile = document.getElementById('cyclingProfile');
  let routingProfileIcon = "<i class='fas fa-car fa-lg'></i>"

  drivingProfile.addEventListener('click', function() {
   routingProfile = "driving";
   routingProfileIcon = "<i class='fas fa-car fa-lg'></i>";
   fitMap(map, coords);
  });
  walkingProfile.addEventListener('click', function() {
   routingProfile = "walking";
   routingProfileIcon = "<i class='fas fa-walking fa-lg'></i>";
   fitMap(map, coords);
  });
  cyclingProfile.addEventListener('click', function() {
   routingProfile = "cycling";
   routingProfileIcon = "<i class='fas fa-biking fa-lg'></i>";
   fitMap(map, coords);
  });


  function getRoute() {
    var url = 'https://api.mapbox.com/directions/v5/mapbox/' + routingProfile + '/'  + listCoords + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;

    console.log(url)
    console.log(routingProfile)

    var req = new XMLHttpRequest();
    req.open('GET', url, true);

    req.onload = function() {
      var json = JSON.parse(req.response);
      var data = json.routes[0];
      var route = data.geometry.coordinates;
      var geojson = {
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'LineString',
          coordinates: route
        }
      };
      if (map.getSource('route')) {
        map.getSource('route').setData(geojson);
      } else {
        map.addLayer({
          id: 'route',
          type: 'line',
          source: {
            type: 'geojson',
            data: {
              type: 'Feature',
              properties: {},
              geometry: {
                type: 'LineString',
                coordinates: geojson
              }
            }
          },
          layout: {
            'line-join': 'round',
            'line-cap': 'round'
          },
          paint: {
            'line-color': '#0a0a5c',
            'line-width': 5,
            /*'line-opacity': 0.75*/
          }
        });
      };

      var datasDiv = document.getElementById('datas');

      // Calcul du temps de trajet
      let totalSeconds = data.duration
      let hours = Math.floor(totalSeconds / 3600);
      totalSeconds %= 3600;
      let minutes = Math.floor(totalSeconds / 60);
      let seconds = totalSeconds % 60;

      minutes = String(minutes).padStart(2, "0");
      hours = String(hours).padStart(2, "0");
      seconds = String(seconds).padStart(2, "0");

      let tripDuration = hours +':'+ ('0'+minutes).slice(-2);

      // Récupération du nombre d'étapes
      let nbWaypoints = json.waypoints.length;

      // Récupération de la distance totale
      let tripDistance = data.distance;
      tripDistance = Math.round(tripDistance / 100) / 10;

      // Récupération du nom de chaque étape
      let waypointsNames = [];
      waypoints.features.forEach(function(feature) {
        let name = feature.properties.name
        waypointsNames.push(name)
      });

      // Récupération de la distance entre chaque étape
      let waypointsDistance = [];
      let legs = data.legs;
      Object.values(legs);
      legs.forEach(function(leg) {
        let distance = Math.round(leg.distance / 100) / 10;
        waypointsDistance.push(distance)
      });
      console.log(waypointsDistance)

      // Récupération du temps de trajet entre chaque étape
      let waypointsDuration = [];
      legs.forEach(function(leg) {
        let totalSeconds = leg.duration
        let hours = Math.floor(totalSeconds / 3600);;
        totalSeconds %= 3600;
        let minutes = Math.floor(totalSeconds / 60);
        let seconds = totalSeconds % 60
        minutes = String(minutes).padStart(2, "0");
        hours = String(hours).padStart(2, "0");
        seconds = String(seconds).padStart(2, "0");
        let duration = hours +':'+ ('0'+minutes).slice(-2) +':'+ ('0'+seconds).slice(-2);
        waypointsDuration.push(duration)
      });
      console.log(waypointsDuration)

      // Création des tripDetails
      let tripDetails = [];
      for (i = 0; i < waypointsNames.length - 1; i++) {
        tripDetails.push("<i class='fas fa-map-marker-alt fa-lg'></i> <span class='pl-3 has-text-weight-bold has-text-black is-size-6'>" + waypointsNames[i] + "</span><p class='has-text-right'>|</p><p class='has-text-right is-size-7 has-text-weight-bold has-text-black'>" + waypointsDistance[i] + " km</p><p class='has-text-right is-size-7 has-text-weight-bold has-text-black'>" + waypointsDuration[i] + "</p><p class='has-text-right'><i class='fas fa-angle-double-down'></i></p>");
      }
      // Affichage des datas du tripDuration
      datasDiv.innerHTML = "<h4 class='title is-5 has-text-centered has-text-black'> Données globales </h4><p class='pl-3 is-size-7 has-text-centered'><i class='fas fa-lg fa-clock'></i> " + tripDuration + "<strong class='is-size-5'> | </strong><i class='fas fa-map-marker-alt fa-lg'></i> " + nbWaypoints + "<strong class='is-size-5'> | </strong> <i class='fas fa-lg fa-road'></i> " + tripDistance + "km</p><p class='pl-3 is-size-7'> Mode de transport : " + routingProfileIcon + "</p><br><h4 class='title is-5 has-text-black has-text-centered'> Détails de l'itinéraire</h4><p class='has-text-centered'><i class='fas fa-lg fa-route'></i></p>" + tripDetails.join(" ") + "<i class='fas fa-map-marker-alt fa-lg'></i> <span class=' pl-3 has-text-weight-bold is-size-6 has-text-black'>" + waypointsNames.slice(-1)[0] + "</span><p class='has-text-centered'><i class='fas fa-lg fa-flag-checkered'></i></p>";

    };

     req.send();
   };

   // function to call on map load to add markers to map
   function addMarkers() {
     waypoints.features.forEach(function(marker) {
       // create a HTML element for each feature
       let el = document.createElement('i');
       el.className = 'numberCircle';
       el.innerHTML = waypoints.features.indexOf(marker) + 1;
       let popup = new mapboxgl.Popup({ offset: 25 }).setHTML('<strong>' + marker.properties.name + '</strong><p>'+ marker.properties.address + '</p>' + '<strong>' + marker.properties.website + '<strong>');
       // make a marker for each feature and add to the map
       new mapboxgl.Marker(el)
         .setLngLat(marker.geometry.coordinates)
         .setPopup(popup) // add popups
         .addTo(map);
     });
     //marker.togglePopup(); // toggle popup open or closed
   };

   function fitMap() {
     var bounds = coords.reduce(function (bounds, coord) {
       return bounds.extend(coord);
     }, new mapboxgl.LngLatBounds(coords[0], coords[0]));
     map.fitBounds(bounds, {
       padding: 80
     });
    getRoute();
  };

    map.on('load', function() {
      addMarkers();
      fitMap(map, coords);
    });

    getRoute();


  // Add fulllscreen control on the map
  map.addControl(new mapboxgl.FullscreenControl());

  // Add zoom and rotation controls to the map.
  map.addControl(new mapboxgl.NavigationControl());


</script>
