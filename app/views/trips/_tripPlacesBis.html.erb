<div class="container">
  <div class="container has-text-centered">
    <i class="fas fa-map-marker-alt fa-2x icon-margin"></i>
    <span class="is-size-4 has-text-black-bis has-text-weight-semibold"><%= trip.places.length%> étape(s)</span>
  </div>

  <div class="columns">
    <div class="column">
      <p class="is-size-6 has-text-centered has-text-black-bis">Type d'itinéraire : <span class= "is-size-6 has-text-centered has-text-black-bis has-text-weight-semibold"><%= trip.category.name %></span> </p>
    </div>

      <div class="column">
        <% if trip.tag_list.any? %>
          <p class="is-size-6 has-text-centered has-text-black-bis"> Tags : <%= trip.tag_list %> </p>
        <% end %>
      </div>
  </div>

  <div class="columns is-mobile is-centered">
    <div class="column is-three-quarters-mobile is-three-fifths-tablet is-two-thirds-desktop is-three-quarters-widescreen is-three-quarters-fullhd">
      <div id="map" style="width: 100%; height: 350px;"></div>
    </div>
  </div>
</div>
<br>

<section class="section">
  <% trip.trip_waypoints.order(rank: :asc).each do |waypoint| %>
    <div class="columns is-mobile is-centered">
      <div class="column is-full-mobile is-three-quarters-tablet is-three-quarters-desktop is-three-fifths-widescreen is-three-fifths-fullhd">

        <div class="columns is-multiline is-variable is-2">
          <div class="column is-one-quarter">
            <figure class="image is-5by3">
              <% if waypoint.place.place_picture.attached? %>
                <%= link_to image_tag(waypoint.place.place_picture, class: "is-rounded"), place_path(waypoint.place.id) %>
              <% else %>
                <img class='is-rounded' src = "https://images.unsplash.com/photo-1589596619062-068730a17443?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1300&q=80">
              <% end %>
            </figure>
          </div>
          <div class="column is-three-quarters">
            <h3 class="is-size-5 has-text-weight-semibold"><%= link_to "#{waypoint.rank} #{waypoint.place.name}", place_path(waypoint.place[:id]), class:"has-text-black"%></h3>
            <p class="subtitle has-text-black is-size-6"><%= waypoint.place.subtitle %></p>
          </div>
          <div class="column">
            <p class="is-size-6 has-text-black-bis"><%= sanitize waypoint.place.description %></p>
          </div>
        </div>
        <div class="columns is-centered">
          <div class="column is-half">
            <hr>
          </div>
        </div>





      </div>
    </div>
  <% end %>
</section>





<script>

  // RAJOUTER LA CLÉ EN DESSOUS
  var accessToken =  '<%= ENV['MAPBOX_KEY']%>';
  mapboxgl.accessToken = accessToken;

  //on initialise notre map sur le div #map
  var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v10',
    center: [<%= trip.places.first.longitude%>, <%= trip.places.first.latitude%>], //un centre initial [longitude, latitude] qui est le point de départ de l'itinéraire (facultatif).
    zoom: 11 //un zoom initial (facultatif)
  });

  var language = new MapboxLanguage();
  map.addControl(language);


  var coords = []
  gon.places.forEach(function(place) {
    var new_array = [place.longitude, place.latitude];
    coords.push(new_array)
  });

  var geojson = {
    type: 'FeatureCollection',
    features: []
  }

  gon.places.forEach(function(place) {
    var new_feature = {
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: [place.longitude, place.latitude]
      },
      properties: {
        name: place.name,
        description: place.description,
        subtitle: place.subtitle,
        price: place.price_2,
        website: place.website,
        phone: place.phone,
        address: place.address,
      }
    };
    geojson.features.push(new_feature)
  });

  /**
   * Assign a unique id to each geojson item. To use this `id`
   * later to associate each point on the map with a listing
   * in a sidebar.
  */
  geojson.features.forEach(function(geojson, i) {
    geojson.properties.id = i;
  });

  map.on('load', function () {
      fitMap(map, coords);
  });

  function fitMap(map, coords) {
    var bounds = coords.reduce(function (bounds, coord) {
      return bounds.extend(coord);
      },
      new mapboxgl.LngLatBounds(coords[0], coords[0]));
    map.fitBounds(bounds, {
      padding: 30 //marge autour des points
    });

    addMarkers()
  }

  // function to call on map load to add markers to map
  function addMarkers() {
    geojson.features.forEach(function(marker) {
      // create a HTML element for each feature
      var el = document.createElement('div');
      el.className = 'fas fa-map-marker-alt fa-3x';
      // make a marker for each feature and add to the map
      new mapboxgl.Marker(el)
        .setLngLat(marker.geometry.coordinates)
        .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups
        .setHTML('<strong>' + marker.properties.name + '</strong><p>'+ marker.properties.address + '</p>' + '<strong>' + marker.properties.website + '<strong>'))
        .addTo(map);
    });

    marker.togglePopup(); // toggle popup open or closed
  }



  // Add fulllscreen control on the map
  map.addControl(new mapboxgl.FullscreenControl());

  // Add zoom and rotation controls to the map.
  map.addControl(new mapboxgl.NavigationControl());

</script>
